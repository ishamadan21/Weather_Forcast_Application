{"ast":null,"code":"var _jsxFileName = \"/Users/ishamadan/Desktop/web development/assignment7/assignment7_divyagirase/src/App.jsx\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Link } from 'react-router-dom';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getLoctionWeather = () => {\n      var api_key = \"0d9d68a0e32b49dd9b9e9bacc9eefc16\";\n      var city = this.state.city;\n      var country = this.state.country;\n      var url = \"http://api.openweathermap.org/data/2.5/forecast?q=\" + city + \",\" + country + \"&appid=\" + api_key;\n      fetch(url).then(response => response.json()).then(result => {\n        if (result.cod === \"404\") {\n          this.setState({\n            resErr: true\n          });\n        } else {\n          this.setState({\n            weatherData: result,\n            resErr: false\n          });\n        }\n      }, error => {\n        alert('error');\n        this.setState({\n          weatherData: []\n        });\n      });\n    };\n\n    this.createDropDown = () => {\n      return React.createElement(\"div\", {\n        className: \"locationField\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"city\",\n        type: \"text\",\n        placeholder: \"City\",\n        value: this.state.city,\n        onChange: this.handleCityChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        id: \"country\",\n        type: \"text\",\n        placeholder: \"Country\",\n        value: this.state.country,\n        onChange: this.handleCountryChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.getLoctionWeather,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Get Weather\"), this.state.resErr === true ? React.createElement(\"div\", {\n        className: \"error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"City not found\") : \"\");\n    };\n\n    this.createBlock = () => {\n      let currentDayWeatherType = this.state.weatherData.list[0].weather[0].main + \".png\";\n      let dateStr = this.state.weatherData.list[0].dt_txt.split(' ')[0];\n      var weekDay = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n      var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n      var weatherDay = weekDay[new Date(dateStr).getDay()];\n      var dateDisplay = months[new Date(dateStr).getMonth()] + \" \" + (new Date(dateStr).getDate() + 1) + \", \" + new Date(dateStr).getFullYear();\n      var weatherTemp = this.convertTemperature(this.state.weatherData.list[0].main.temp).toFixed(0) + String.fromCharCode(176) + 'C';\n      var weatherWind = this.convertSpeed(this.state.weatherData.list[0].wind.speed).toFixed(0) + 'km/h';\n      return React.createElement(\"div\", {\n        className: \"mainDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mainDivContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"applicationHeading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Weather Forecast\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"mainDivElemHead\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, this.state.dispCity.toUpperCase() + \" , \" + this.state.country.toUpperCase()), this.createDropDown()), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"mainDivElemHead1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"  \", weatherDay, \" \", dateDisplay)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"mainDivCon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"inLine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, weatherTemp)), React.createElement(\"div\", {\n        className: \"leftSide\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"leftSideBlock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Humidity: \", this.state.weatherData.list[0].main.humidity, \"%\")), React.createElement(\"div\", {\n        className: \"leftSideBlock\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Wind: \", weatherWind))))), this.createWeatherBlocks());\n    };\n\n    this.createWeatherBlocks = () => {\n      var dayBlocks = [];\n\n      for (var i = 0; i < this.state.weatherData.list.length; i++) {\n        let datecur = this.state.weatherData.list[i].dt_txt.split(' ')[0];\n\n        if (i !== 0) {\n          let dateold = this.state.weatherData.list[i - 1].dt_txt.split(' ')[0];\n\n          if (datecur === dateold) {\n            continue;\n          }\n        }\n\n        var dateStr = this.state.weatherData.list[i].dt_txt.split(' ')[0];\n        var currentCity = this.state.weatherData.city.name;\n        var weekDay = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        var weatherDay = weekDay[new Date(dateStr) + 1];\n        var currentDayWeather = this.state.weatherData.list.filter(daywiseData => daywiseData.dt_txt.includes(dateStr));\n        dayBlocks.push(React.createElement(Link, {\n          to: {\n            pathname: '/daywise',\n            state: {\n              city: currentCity,\n              dayWiseData: currentDayWeather\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"dayBlocks\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, this.createWeatherElements(i))));\n      }\n\n      return dayBlocks;\n    };\n\n    this.createWeatherElements = i => {\n      var weatherType = this.state.weatherData.list[i].weather[0].main;\n      var imgPath = weatherType + '.png';\n      imgPath = \"http://openweathermap.org/img/wn/\" + this.state.weatherData.list[i].weather[0].icon + \"@2x.png\"; //alert(imgPath);\n\n      var minTemp = this.convertTemperature(this.state.weatherData.list[i].main.temp_min).toFixed(0) + String.fromCharCode(176);\n      var maxTemp = this.convertTemperature(this.state.weatherData.list[i].main.temp_max).toFixed(0) + String.fromCharCode(176);\n      var dateStr = this.state.weatherData.list[i].dt_txt.split(' ')[0];\n      var weekDay = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n      var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]; //alert(new Date(dateStr).getDay());\n\n      var weatherDay = weekDay[new Date(dateStr).getDay()];\n      var dateDisplay = months[new Date(dateStr).getMonth()] + \" \" + (new Date(dateStr).getDate() + 1) + \", \" + new Date(dateStr).getFullYear();\n      var weatherHumidity = this.state.weatherData.list[i].main.humidity + String.fromCharCode(37);\n      var weatherWind = this.convertSpeed(this.state.weatherData.list[i].wind.speed).toFixed(0) + ' km/h';\n      return React.createElement(\"div\", {\n        className: \"weatherElements\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"weatherDay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, weatherDay), React.createElement(\"div\", {\n        className: \"tempElem1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Min \", minTemp), React.createElement(\"div\", {\n        className: \"tempElem1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"Max \", maxTemp), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"weatherImages\",\n        src: imgPath,\n        alt: \"weatherSunny\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"humidity1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"humidIcon\",\n        src: \"Humidity.png\",\n        height: \"20px\",\n        width: \"20px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), \" \", weatherHumidity))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"humidity1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"humidIcon\",\n        src: \"wind.png\",\n        height: \"18px\",\n        width: \"18px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }), \" \", weatherWind)))), React.createElement(\"div\", {\n        className: \"wetherElementDay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, dateDisplay));\n    };\n\n    this.populateMainDiv = () => {};\n\n    this.state = {\n      weather: [{\n        day: 'Monday',\n        temperatur: 25,\n        min: 23,\n        max: 27,\n        wind: '12kmph',\n        type: 'sunny',\n        humidity: '59%'\n      }, {\n        day: 'Tuesday',\n        temperatur: 25,\n        min: 23,\n        max: 27,\n        wind: '12kmph',\n        type: 'snowy',\n        humidity: '59%'\n      }, {\n        day: 'Wednesday',\n        temperatur: 25,\n        min: 23,\n        max: 27,\n        wind: '12kmph',\n        type: 'rainy',\n        humidity: '59%'\n      }, {\n        day: 'Thursday',\n        temperatur: 25,\n        min: 23,\n        max: 27,\n        wind: '12kmph',\n        type: 'sunny',\n        humidity: '59%'\n      }, {\n        day: 'Friday',\n        temperatur: 25,\n        min: 23,\n        max: 27,\n        wind: '12kmph',\n        type: 'cloudy',\n        humidity: '59%'\n      }],\n      weatherData: [],\n      city: 'London',\n      dispCity: 'London',\n      country: 'UK',\n      resErr: false\n    };\n    this.changeTempScale = this.changeTempScale.bind(this);\n    this.handleCityChange = this.handleCityChange.bind(this);\n    this.handleCountryChange = this.handleCountryChange.bind(this);\n  }\n\n  componentDidMount() {\n    var api_key = \"0d9d68a0e32b49dd9b9e9bacc9eefc16\";\n    var url = \"http://api.openweathermap.org/data/2.5/forecast?q=London,us&appid=\" + api_key;\n    fetch(url).then(response => response.json()).then(result => {\n      this.setState({\n        weatherData: result\n      });\n    }, error => {\n      this.setState({\n        weatherData: []\n      });\n    });\n  }\n\n  render() {\n    if (this.state.weatherData.length != 0) {\n      return React.createElement(\"div\", {\n        className: \"outerDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.createBlock());\n    } //alert(this.state.weatherData.list[0].main.temp);\n    else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        });\n      }\n  }\n\n  handleCityChange(event) {\n    this.setState({\n      city: event.target.value\n    });\n    this.setState({\n      dispCity: event.target.value\n    });\n  }\n\n  handleCountryChange(event) {\n    this.setState({\n      country: event.target.value\n    });\n  }\n\n  convertSpeed(value) {\n    var speed = value * 18 / 5;\n    return speed;\n  }\n\n  convertTemperature(value) {\n    var celcius = value - 273.15;\n    return celcius;\n  }\n\n  changeTempScale(event) {\n    var a = event.target.id;\n    alert(\"hello\");\n    alert(event.target.value);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ishamadan/Desktop/web development/assignment7/assignment7_divyagirase/src/App.jsx"],"names":["React","Component","Link","App","constructor","props","getLoctionWeather","api_key","city","state","country","url","fetch","then","response","json","result","cod","setState","resErr","weatherData","error","alert","createDropDown","handleCityChange","handleCountryChange","createBlock","currentDayWeatherType","list","weather","main","dateStr","dt_txt","split","weekDay","months","weatherDay","Date","getDay","dateDisplay","getMonth","getDate","getFullYear","weatherTemp","convertTemperature","temp","toFixed","String","fromCharCode","weatherWind","convertSpeed","wind","speed","dispCity","toUpperCase","humidity","createWeatherBlocks","dayBlocks","i","length","datecur","dateold","currentCity","name","currentDayWeather","filter","daywiseData","includes","push","pathname","dayWiseData","createWeatherElements","weatherType","imgPath","icon","minTemp","temp_min","maxTemp","temp_max","weatherHumidity","populateMainDiv","day","temperatur","min","max","type","changeTempScale","bind","componentDidMount","render","event","target","value","celcius","a","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Link } from 'react-router-dom';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n            weather: [\n                        {day:'Monday',temperatur:25, min:23, max:27, wind:'12kmph',type:'sunny',humidity:'59%'},\n                        {day:'Tuesday',temperatur:25, min:23, max:27, wind:'12kmph',type:'snowy',humidity:'59%'},\n                        {day:'Wednesday',temperatur:25, min:23, max:27, wind:'12kmph',type:'rainy',humidity:'59%'},\n                        {day:'Thursday',temperatur:25, min:23, max:27, wind:'12kmph',type:'sunny',humidity:'59%'},\n                        {day:'Friday',temperatur:25, min:23, max:27, wind:'12kmph',type:'cloudy',humidity:'59%'},\n                    ],\n            weatherData : [],\n            city: 'London',\n            dispCity:'London',\n            country: 'UK',\n            resErr:false\n          }\n    this.changeTempScale = this.changeTempScale.bind(this);\n    this.handleCityChange = this.handleCityChange.bind(this);\n    this.handleCountryChange = this.handleCountryChange.bind(this);\n    }\n\n    componentDidMount(){\n      var api_key = \"0d9d68a0e32b49dd9b9e9bacc9eefc16\";\n      var url = \"http://api.openweathermap.org/data/2.5/forecast?q=London,us&appid=\"+api_key;\n      fetch(url).then(response => response.json()).then(\n                             (result) => {\n                              this.setState({\n                                  weatherData:result\n                              });\n                              },\n                      (error) => {\n                        this.setState({\n                          weatherData : []\n                      });\n              }\n              )\n\n        \n    }\n\n  render() {\n    if(this.state.weatherData.length!=0){\n      return (\n        <div className=\"outerDiv\">\n          {this.createBlock()}\n        </div>\n      );\n    }\n      //alert(this.state.weatherData.list[0].main.temp);\n    else{\n      return(\n        <div></div>\n      );\n    }\n  }\n\n  handleCityChange(event) {\n    this.setState({city: event.target.value});\n    this.setState({dispCity: event.target.value});\n  }\n\n  handleCountryChange(event){\n    this.setState({country: event.target.value});\n  }\n\n  getLoctionWeather = () =>  {\n    var api_key = \"0d9d68a0e32b49dd9b9e9bacc9eefc16\";\n\n    var city = (this.state.city);\n    var country = (this.state.country);\n      var url = \"http://api.openweathermap.org/data/2.5/forecast?q=\" + city +\",\"+ country + \"&appid=\"+api_key;\n      fetch(url).then(response => response.json()).then(\n                             (result) => {\n                              if(result.cod === \"404\"){\n                                this.setState({resErr:true});\n                              }\n                              else{\n                                this.setState({\n                                  weatherData:result,\n                                  resErr:false\n                              });\n                              }\n                              },\n                      (error) => {\n                        alert('error');\n                        this.setState({\n                          weatherData : []\n                      });\n              }\n              )\n  }\n\n  createDropDown = () => {\n    return(\n      <div className=\"locationField\">\n      <input id=\"city\" type=\"text\" placeholder=\"City\" value={this.state.city} onChange={this.handleCityChange}></input>\n      <input id=\"country\" type=\"text\" placeholder=\"Country\" value={this.state.country} onChange={this.handleCountryChange}></input>\n      <button onClick={this.getLoctionWeather}>Get Weather</button>\n      {(this.state.resErr===true) ? \n        <div className=\"error\">City not found</div> :\n        \"\"\n      }\n      </div>\n    );\n  }\n\n  createBlock = () => {\n      let currentDayWeatherType = this.state.weatherData.list[0].weather[0].main + \".png\";\n      let dateStr = this.state.weatherData.list[0].dt_txt.split(' ')[0];\n      var weekDay = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\n      var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n      var weatherDay = weekDay[(new Date(dateStr)).getDay()];\n      var dateDisplay = months[new Date(dateStr).getMonth()] + \" \" + (new Date(dateStr).getDate()+1) + \", \" + (new Date(dateStr).getFullYear());\n      var weatherTemp = this.convertTemperature(this.state.weatherData.list[0].main.temp).toFixed(0) + String.fromCharCode(176) + 'C';\n      var weatherWind = this.convertSpeed(this.state.weatherData.list[0].wind.speed).toFixed(0) + 'km/h';\n      return(\n        <div className=\"mainDiv\">\n        <div className=\"mainDivContent\">\n          <h1 className=\"applicationHeading\">Weather Forecast</h1>\n          <div>\n            <h1 className=\"mainDivElemHead\">{this.state.dispCity.toUpperCase() + \" , \" + this.state.country.toUpperCase()}</h1>\n                        {this.createDropDown()}\n          </div>\n          <br/><br/><br/>\n          <div>\n          <h1 className=\"mainDivElemHead1\">  {weatherDay} {dateDisplay}</h1>\n          </div>\n          <br/><br/>\n          <div className=\"mainDivCon\">\n          <div className=\"inLine\"><h1>{weatherTemp}</h1></div>\n          <div className=\"leftSide\">\n          <div className=\"leftSideBlock\"><h2>Humidity: {this.state.weatherData.list[0].main.humidity}%</h2></div>\n          <div className=\"leftSideBlock\"><h2>Wind: {weatherWind}</h2></div>\n          </div>\n          </div>\n        </div>\n        \n        {this.createWeatherBlocks()}\n      </div>\n      );\n  }\n\n  createWeatherBlocks = () => {\n    var dayBlocks = [];\n    for(var i=0;i<this.state.weatherData.list.length;i++){\n      let datecur = this.state.weatherData.list[i].dt_txt.split(' ')[0];\n      if(i!==0){\n        let dateold = this.state.weatherData.list[i-1].dt_txt.split(' ')[0];\n        if(datecur === dateold){\n          continue;\n        }\n      }\n\n      var dateStr = this.state.weatherData.list[i].dt_txt.split(' ')[0];\n      var currentCity = this.state.weatherData.city.name;\n      var weekDay = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\n      var weatherDay = weekDay[(new Date(dateStr))+1];\n      var currentDayWeather = (this.state.weatherData.list.filter(daywiseData => daywiseData.dt_txt.includes(dateStr)));\n      dayBlocks.push(\n        <Link to={{ pathname: '/daywise', state: { city : currentCity , dayWiseData: currentDayWeather} }}>\n        <div className=\"dayBlocks\">\n          {this.createWeatherElements(i)}\n        </div>\n        </Link>\n      );\n    }\n    return dayBlocks;\n  }\n\n  createWeatherElements = (i) => {\n    var weatherType = this.state.weatherData.list[i].weather[0].main;\n    var imgPath =   weatherType +'.png';\n    imgPath = \"http://openweathermap.org/img/wn/\"+ this.state.weatherData.list[i].weather[0].icon+ \"@2x.png\";\n    //alert(imgPath);\n    var minTemp = this.convertTemperature(this.state.weatherData.list[i].main.temp_min).toFixed(0) + String.fromCharCode(176);\n    var maxTemp = this.convertTemperature(this.state.weatherData.list[i].main.temp_max).toFixed(0) + String.fromCharCode(176);\n    var dateStr = this.state.weatherData.list[i].dt_txt.split(' ')[0];\n    var weekDay = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\n    var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    //alert(new Date(dateStr).getDay());\n    var weatherDay = weekDay[(new Date(dateStr)).getDay()];\n    var dateDisplay = months[new Date(dateStr).getMonth()] + \" \" + (new Date(dateStr).getDate()+1) + \", \" + (new Date(dateStr).getFullYear());\n    var weatherHumidity = this.state.weatherData.list[i].main.humidity + String.fromCharCode(37);\n    var weatherWind = this.convertSpeed(this.state.weatherData.list[i].wind.speed).toFixed(0) + ' km/h';  \n    \n    return(\n        <div className=\"weatherElements\">\n          <div>\n            <div className=\"weatherDay\">{weatherDay}</div>\n            <div className=\"tempElem1\">Min {minTemp}</div>\n            <div className=\"tempElem1\">Max {maxTemp}</div>\n            <div>\n              <img className=\"weatherImages\" src={imgPath} alt=\"weatherSunny\"></img>\n            </div>\n\n            <div>\n            <div>\n                <div className=\"humidity1\"><img className=\"humidIcon\" src=\"Humidity.png\" height=\"20px\" width=\"20px\"/> {weatherHumidity}</div>\n                \n            </div>\n        </div>\n        <div>\n        <div>\n            <div className=\"humidity1\"><img className=\"humidIcon\" src=\"wind.png\" height=\"18px\" width=\"18px\"/> {weatherWind}</div>\n            \n        </div>\n    </div>\n\n        </div>\n        \n          <div className=\"wetherElementDay\">\n            {dateDisplay}\n          </div>\n        </div>\n      );\n  }\n\n  convertSpeed(value){ \n    var speed = (value*18)/5;\n    return speed;\n  }\n\n  convertTemperature(value){\n    var celcius = (value - 273.15);\n    return celcius;\n  }\n\n  changeTempScale(event) {\n    var a = event.target.id;\n    alert(\"hello\");\n    alert(event.target.value);\n  }\n  populateMainDiv = () => {\n\n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}